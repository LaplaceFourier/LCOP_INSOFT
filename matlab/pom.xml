<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>matlab.service.portal</groupId>
	<artifactId>matlab</artifactId>
	<version>1.0</version>
	<packaging>war</packaging>
	<name>matlab</name>
	<description>matlab's portal service</description>
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>4.2.5.RELEASE</org.springframework-version>
		<org.slf4j-version>1.7.21</org.slf4j-version>
	<commons-lang>2.4</commons-lang>
	<!-- <org.springframework.security-version>3.2.4.RELEASE</org.springframework.security-version>
		<spring-json>1.3.1</spring-json>

		<org.aspectj-version>1.6.10</org.aspectj-version>
		<poi>3.10-FINAL</poi>

		<commons-attributes>2.1</commons-attributes>
		<commons-beanutils>1.8.3</commons-beanutils>
		<commons-collections>3.2</commons-collections>
		<commons-httpclient>3.1</commons-httpclient>
		
		<commons-dbcp>1.3</commons-dbcp>

		<ezmorph>1.0.6</ezmorph>
		<quartz.version>2.2.1</quartz.version>
		<httpclient>4.3.2</httpclient>
		<jclouds.version>1.9.0</jclouds.version> -->
	</properties>
	
	<dependencies>
		<!-- Spring MVC를 위한 설정, 관련된 파일 다 받아짐 -->
	  	<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<!-- validation 검사를 위한 설정, JSR 303 관련 설정, annotation을 이용하여 유효성 체크 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.2.4.Final</version>
		</dependency>
		
		<!-- The Simple Logging Facade for Java, log4j나 logback과 같이 쓰인다. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- HttpServletRequest request, HttpSession session과 관련된 library를 다운을 받음  -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		<!-- commons와 관련하여 아파치에서 제공하는 클래스들을 제공, org.apache.commons.lang.builder.ToStringBuilder 관련 -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${commons-lang}</version>
		</dependency>
		
		<!-- JSON과 관련된 부분, Java Object를 Json Object로 전환 -->		
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.4</version>
			<classifier>jdk15</classifier>
		</dependency>
		
		<!--  -->
 		<dependency>
  	    	<groupId>egovframework.rte</groupId>
  	    	<artifactId>egovframework.rte.fdl.security</artifactId>
  	    	<version>3.1.0</version>
  	    </dependency>
  	   
	</dependencies>
	
	<!-- Maven build와 관련된 부분, 플러그인 3개를 추가한다. -->
	 <build>
	    <plugins>
	    	<!-- Web Tool 과 관련된 플러그인을 설정함 -->
	        <plugin>
	            <artifactId>maven-eclipse-plugin</artifactId>
	            <version>2.9</version>
	            <configuration>
	                <additionalProjectnatures>
	                    <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
	                </additionalProjectnatures>
	                <additionalBuildcommands>
	                    <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
	                </additionalBuildcommands>
	                <downloadSources>true</downloadSources>
	                <downloadJavadocs>true</downloadJavadocs>
	            </configuration>
	        </plugin>
	        
	        <!-- Maven 플러그인의 컴파일러 관련 부분을 설정하는 부분 -->
	        <plugin>
	            <groupId>org.apache.maven.plugins</groupId>
	            <artifactId>maven-compiler-plugin</artifactId>
	            <version>2.5.1</version>
	            <configuration>
	                <source>${java-version}</source>
	                <target>${java-version}</target>
	                <compilerArgument>-Xlint:all</compilerArgument>
	                <showWarnings>true</showWarnings>
	                <showDeprecation>true</showDeprecation>
	            </configuration>
	        </plugin>
	        <!-- Eclipse에서도 배포가 가능 하겠지만, 개발 환경이 항상 Eclipse를 사용하고 있을 수는 없을 것이다. Maven은 직접 소스를 build해서 war로 만들 수 있다. 개발자가 불편을 감안하고
	        직업 Tomcat에 deply하여 실제 서비스 환경과 비슷한 환경에서 테스트를 진행 할 수 있고, 좀 더 편리한 환경에서 테스트가 가능하다. 이 때, Tomcat Plugin을 사용한다.-->
	        <plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>tomcat-maven-plugin</artifactId>
			    <version>1.1</version>
			    <configuration>
			        <mode>war</mode>
			        <port>8080</port>
			        <path>/</path>
			        <charset>UTF-8</charset>
			        <uriEncoding>UTF-8</uriEncoding>
			    </configuration>
			</plugin>
	    </plugins>
	</build>
</project>
